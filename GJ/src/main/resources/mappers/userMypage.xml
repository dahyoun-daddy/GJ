<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sist.gj.mappers.userMypage">

	<sql id="searchText">
		<where>
  			<choose>
  				<when test="10 == searchDiv">
  					hr.u_id LIKE '%'||#{searchWord}||'%'
  				</when>
  				<when test="20 == searchDiv">
  					hr.name LIKE '%'||#{searchWord}||'%'
  				</when>
  				<when test="30 == searchDiv"> 
  					hr.email LIKE '%'||#{searchWord}||'%'
  				</when>
  				<otherwise>
  				</otherwise>
  			</choose>
  		</where>
	</sql>
	
	<insert id="addPic" parameterType="PictureVO">
		INSERT INTO profile (
			    user_id,
			    p_fl_nm,
			    p_sv_nm,
			    p_fl_pt,
			    p_fl_tp,
			    p_fl_sz,
			    reg_id,
			    reg_dt
			) VALUES (
			    #{userId},
			    #{pFlNm},
			    #{pSvNm},
			    #{pFlPt},
			    #{pFlTp},
			    #{pFlSz},
			    #{regId},
			    sysdate
			)
	</insert>
	
	<delete id="deletePic" parameterType="PictureVO">
		DELETE FROM profile
		WHERE user_id = #{userId}
	</delete>
	
	
	<delete id="deleteCvAll">
		DELETE FROM usercv
	</delete>
	
	
	<!-- 기업 마이페이지 오픈된 이력서 리스트 -->
	<select id="retrieveCv" parameterType="SearchVO" resultType="CvFormVO">
		SELECT X.*, Y.*
		  FROM
		(
		    SELECT T.reg_id,
		           T.cv_date,
		           T.cv_grade,
		           T.cv_check,
		           T.reg_dt,
                   T.mod_id,
                   T.mod_dt,
		           T.rnum AS no
		      FROM
		    (
		        SELECT C.*,
		               ROW_NUMBER() OVER(ORDER BY reg_dt DESC) AS rnum
		          FROM usercv C
		  		 <include refid="searchText"/>
		    ) T
		    WHERE rnum BETWEEN (#{pageSize} * (#{pageNum}-1)+1)
			  AND (#{pageSize} * (#{pageNum}-1)+ #{pageSize})
		) X
		NATURAL JOIN
		(
		    SELECT COUNT(*) AS total_cnt
		      FROM usercv
		    <include refid="searchText"/>
		) Y
	</select>

	<insert id="addCv" parameterType="CvFormVO">
		INSERT INTO USERCV(reg_id, cv_date, cv_grade, cv_check, reg_dt) VALUES (
		    #{regId},
            sysdate,
            #{cvGrade},
            #{cvCheck},
            sysdate
            )
	</insert>
	
	<update id="updateCv" parameterType="CvFormVO">
		UPDATE usercv
		SET
		    cv_date  = sysdate ,
		    cv_grade = #{cvGrade},
		    cv_check = #{cvCheck},
		    mod_id   = #{regId},
		    mod_dt   = sysdate
		WHERE
		    reg_id = #{regId} 
	</update>
	
	<select id="selectCv" parameterType="CvFormVO" resultType="CvFormVO">
		SELECT reg_id, cv_date, cv_grade, cv_check, reg_dt, mod_id, mod_dt
		FROM usercv
		WHERE reg_id = #{regId} 
	</select>
	
	<insert id="addLic" parameterType="LicenseVO">
		INSERT INTO userlicense (
		    lic_no,
		    lic_name,
		    lic_date,
		    lic_score,
		    reg_id
		) VALUES (
		    #{licNo},
		    #{licName},
		    #{licDate},
		    #{licScore},
		    #{regId}
		)
	</insert>
	
	<update id="updateLic" parameterType="LicenseVO">
		UPDATE userlicense
		SET
		    lic_name  = #{licName},
		    lic_date  = #{licDate},
		    lic_score = #{licScore}
		WHERE
		    lic_no = #{licNo}
	</update>
	
	<delete id="deleteLic" parameterType="LicenseVO">
		DELETE FROM userlicense
		WHERE lic_no = #{licNo}
	</delete>
	
	<select id="retrieveLic" parameterType="SearchVO" resultType="LicenseVO">
		SELECT X.*, Y.*
		  FROM
		(
		    SELECT T.LIC_NO,
		           T.LIC_NAME,
		           T.LIC_DATE,
		           T.LIC_SCORE,
		           T.REG_ID,
		           T.rnum AS no
		      FROM
		    (
		        SELECT C.*,
		               ROW_NUMBER() OVER(ORDER BY LIC_DATE DESC) AS rnum
		          FROM USERLICENSE C
		    ) T
		   WHERE rnum BETWEEN (#{pageSize} * (#{pageNum}-1)+1)
		     AND (#{pageSize} * (#{pageNum}-1)+ #{pageSize})
		     <include refid="searchText"/>
		) X
		NATURAL JOIN
		(
		    SELECT COUNT(*) AS total_cnt
		      FROM USERLICENSE
		      <include refid="searchText"/>
		) Y
	</select>
	
	<select id="selectLic" parameterType="SearchVO" resultType="LicenseVO">
		SELECT lic_no, lic_name, lic_date, lic_score, reg_id
		FROM userlicense
		WHERE reg_id = #{regId}
		  AND lic_no = #{licNo} 
	</select>
	
	<insert id="addApply" parameterType="ApplyVO">
		INSERT INTO hireapply (
		    apply_no,
		    user_id,
		    apply_date,
		    hire_no,
		    apply_check
		) VALUES (
		    #{applyNo},
		    #{userId},
		    #{applyDate},
		    #{hireNo},
		    '1'
		)
	</insert>
	
	<select id="retrieveApply" parameterType="SearchVO" resultType="ApplyVO">
		SELECT X.*, Y.*
		  FROM
		(
		    SELECT T.APPLY_NO,
		           T.USER_ID,
		           T.APPLY_DATE,
		           T.HIRE_NO,
		           T.rnum AS no
		      FROM
		    (
		        SELECT C.*,
		               ROW_NUMBER() OVER(ORDER BY APPLY_DATE) AS rnum
		          FROM HIREAPPLY C
		    ) T
		     WHERE rnum BETWEEN (#{pageSize} * (#{pageNum}-1)+1)
		     AND (#{pageSize} * (#{pageNum}-1)+ #{pageSize})
		     <include refid="searchText"/>
		) X
		NATURAL JOIN
		(
		    SELECT COUNT(*) AS total_cnt
		      FROM HIREAPPLY
		      <include refid="searchText"/>
		) Y
	</select>
	
	
	<update id="updateApply" parameterType="ApplyVO"> 
		UPDATE hireapply
		SET
		    apply_check = #{applyCheck}
		WHERE
		    apply_no = #{applyNo}
	</update>
	
	<delete id="deleteApply" parameterType="ApplyVO">
		DELETE FROM hireapply
		WHERE apply_no = #{applyNo}
	</delete>
	
	
	<update id="updateUser" parameterType="UserVO"> 
		UPDATE users
		SET
		     user_passwd = #{userPasswd},
		     user_nick = #{userNick},
		     user_name = #{userName},
		     user_add = #{userAdd},
		     user_passq = #{userPassQu},
		     user_passa = #{userPassAn},
		     user_phone = #{userPhone},
		     enter_salay = #{enterSalay},
		     enter_cnt = #{enterCnt},
		     enter_hiredate = #{enterHiredate},
		     mod_id = #{userId},
		     mod_dt = #{modDt}
		WHERE
		     user_id = #{userId} 
	</update>
	
	<delete id="deleteUser" parameterType="UserVO">
		DELETE FROM users
		 WHERE user_id     = #{userId}
		   AND user_passwd = #{userPasswd}
	</delete>
	
<!-- 	private String userId; //email -->
<!-- 	private String userNick; //nickname -->
<!-- 	private int cvCheck; //resume open chk -->
<!-- 	private int hireCount; //count the company's hireInfo -->
	
	<select id="selectUserInfo" parameterType="UserMPViewVO" resultType="UserMPViewVO">
		SELECT t1.user_id as user_id ,
			   t1.user_nick as user_nick ,
		       t2.cv_check as cv_check
		  FROM users t1, usercv t2
		 WHERE t1.user_id = t2.reg_id
		   AND t1.user_id = #{userId}
	</select>
	
	<select id="selectCompInfo" parameterType="UserMPViewVO" resultType="UserMPViewVO">
		SELECT t1.user_nick as user_nick,
		       count(t2.hire_no) as hire_count
		  FROM users t1, hireinfo t2
		 WHERE t1.user_id = t2.user_id
		   AND t1.user_id = #{userId}
		 GROUP BY t1.user_nick
	</select>
	
	

</mapper>
